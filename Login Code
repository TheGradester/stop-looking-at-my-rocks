# Login Code 
# Lauren and Zachary 
# April 14 
# April 15
# April 16 
# April 22 (new version below)

# Imports tkinter
from tkinter import *

# designs the main_account_screen window/ the main window
# def main_account_screen():
    
global main_screen # changes the main_screen variable to a global variable
main_screen = Tk()   # create a GUI window 
main_screen.geometry("300x250") # set the configuration of GUI window 
main_screen.title("Account Login") # set the title of GUI window
    
# designs the registration window
def register():
    # makes variables global
    global username
    global password
    global username_entry
    global password_entry
    global register_screen

    register_screen = Toplevel(main_screen) 
    register_screen.title("Register")
    register_screen.geometry("300x250")
    
    # sets variables for username and password
    username = StringVar()
    password = StringVar()

    # Text that gives instructions to the user 
    Label(register_screen, text="Please enter details below to register", bg="blue").pack()
    Label(register_screen, text="").pack()

    # Creates a place for a username to be entered 
    username_lable = Label(register_screen, text="Username")
    username_lable.pack()
    username_entry = Entry(register_screen, textvariable=username)
    username_entry.pack()
    
    # Creates a place for a password to be entered 
    password_lable = Label(register_screen, text="Password * ")
    password_lable.pack()
    password_entry = Entry(register_screen, textvariable=password)
    password_entry.pack()


    # Creates a space between the password box and the register button
    Label(register_screen, text="").pack()
   

    # Creates a register button (to confirm registration) in the register popup box
    Button(register_screen, text="Register", width=10, height=1, bg="blue", command = register_user).pack()


# designs the login window
def login():
    # makes variables global 
    global login_screen
    global username_verify
    global password_verify
    global username_login_entry
    global password_login_entry
    
    login_screen = Toplevel(main_screen)
    login_screen.title("Login")
    login_screen.geometry("300x250")

    # sets variables to verify username and password
    username_verify = StringVar()
    password_verify = StringVar()

    # Text that gives instructions to the user
    Label(login_screen, text="Please enter details below to login", bg="blue").pack()
    Label(login_screen, text="").pack()

    # Creates places for the username and password to be entered 
    Label(login_screen, text="Username * ").pack()
    username_login_entry = Entry(login_screen, textvariable=username_verify)
    username_login_entry.pack()
    Label(login_screen, text="").pack()
    Label(login_screen, text="Password * ").pack()
    password__login_entry = Entry(login_screen, textvariable=password_verify, show= '*')
    password__login_entry.pack()
    Label(login_screen, text="").pack()
    Button(login_screen, text="Login", width=10, height=1, bg="blue", command = login_verification).pack()


def register_user():
    
# get username and password
    username_info = username.get()
    password_info = password.get()

# Open file in write mode
    file = open("IRock login info.txt", "a")

# write username and password information into file
    file.write("\n" + "Username: " + username_info + "\n")
    file.write("Password: " + password_info + "\n")
    file.close()

    username_entry.delete(0, END)
    password_entry.delete(0, END)

    # set a label for showing success information on screen 
    Label(register_screen, text="Registration Success", fg="green", font=("calibri", 11)).pack()


def login_verify():
    
    #get username and password
    username1 = username_verify.get()
    password1 = password_verify.get()
    
    # this will delete the entry after login button is pressed
    username_login_entry.delete(0, END)
    password_login_entry.delete(0, END)

    #The method listdir() returns a list containing the names of the entries in the directory given by path.
    list_of_files = os.listdir()  

    #defining verification's conditions 
    if username1 in list_of_files:
        file1 = open(username1, "r")   # open the file in read mode
        verify = file1.read().splitlines()
        
        if password1 in verify:             
            login_sucess()

        else: 
            password_not_recognised()

    else:
        user_not_found()

# Creates a "login success" popup 
def login_sucess():
    global login_success_screen   # make login_success_screen global
    login_success_screen = Toplevel(login_screen)
    login_success_screen.title("Success")
    login_success_screen.geometry("150x100")
    Label(login_success_screen, text="Login Success").pack()
    Button(login_success_screen, text="OK", command = delete_login_success).pack()


# Creates an "invalid password" popup
def password_not_recognised():
    global password_not_recog_screen
    password_not_recog_screen = Toplevel(login_screen)
    password_not_recog_screen.title("Success")
    password_not_recog_screen.geometry("150x100")
    Label(password_not_recog_screen, text="Invalid Password ").pack()
    Button(password_not_recog_screen, text="OK", command=delete_password_not_recognised).pack()



# Creates a "user not found" popup
def user_not_found():
    global user_not_found_screen
    user_not_found_screen = Toplevel(login_screen)
    user_not_found_screen.title("Success")
    user_not_found_screen.geometry("150x100")
    Label(user_not_found_screen, text="User Not Found").pack()
    Button(user_not_found_screen, text="OK", command=delete_user_not_found_screen).pack()


# Deletes popups after they appear: 
# deletes the "login success" popup
def delete_login_success():
    login_success_screen.destroy()

# deletes the "invalid password" popup
def delete_password_not_recognised():
    password_not_recog_screen.destroy()


# deletes the "user not found" popup
def delete_user_not_found_screen():
    user_not_found_screen.destroy()


def login_verification():
    print("working...")


# create a Form label 
Label(text="Welcome to IROCK", bg="blue", width="300", height="2", font=("Calibri", 13)).pack()
Label(text="Choose Login Or Register", bg="blue", width="300", height="2", font=("Calibri", 13)).pack()
Label(text="").pack()


# create the Login Button on the main screen
Button(text="Login", height="2", width="30", command=login).pack() 
Label(text="").pack()

# create the register button on the main screen
Button(text="Register", height="2", width="30", command=register).pack()


# create OK button
Button(login_success_screen, text="OK", command=delete_login_success).pack()



main_screen.mainloop() # start the GUI
main_account_screen()






# April 23rd Update 
# The below code enables the login popups to show up, but the text files are more disorganized
# Another thing to fix: the "registration success" line needs to be deleted after it shows up once

# Imports all modules 
from tkinter import *
import os 

# designs the main_account_screen window/ the main window
# def main_account_screen():
    
global main_screen # changes the main_screen variable to a global variable
main_screen = Tk()   # create a GUI window 
main_screen.geometry("300x250") # set the configuration of GUI window 
main_screen.title("Account Login") # set the title of GUI window
    
# designs the registration window
def register():
    # makes variables global
    global username
    global password
    global username_entry
    global password_entry
    global register_screen

    register_screen = Toplevel(main_screen) 
    register_screen.title("Register")
    register_screen.geometry("300x250")
    
    # sets variables for username and password
    username = StringVar()
    password = StringVar()

    # Text that gives instructions to the user 
    Label(register_screen, text="Please enter details below to register", bg="blue").pack()
    Label(register_screen, text="").pack()

    # Creates a place for a username to be entered 
    username_lable = Label(register_screen, text="Username *")
    username_lable.pack()
    username_entry = Entry(register_screen, textvariable=username)
    username_entry.pack()
    
    # Creates a place for a password to be entered 
    password_lable = Label(register_screen, text="Password * ")
    password_lable.pack()
    password_entry = Entry(register_screen, textvariable=password)
    password_entry.pack()


    # Creates a space between the password box and the register button
    Label(register_screen, text="").pack()
   

    # Creates a register button (to confirm registration) in the register popup box
    Button(register_screen, text="Register", width=10, height=1, bg="blue", command = register_user).pack()


# designs the login window
def login():
    # makes variables global 
    global login_screen
    global username_verify
    global password_verify
    global username_login_entry
    global password_login_entry
    
    login_screen = Toplevel(main_screen)
    login_screen.title("Login")
    login_screen.geometry("300x250")

    # sets variables to verify username and password
    username_verify = StringVar()
    password_verify = StringVar()

    # Text that gives instructions to the user
    Label(login_screen, text="Please enter details below to login", bg="blue").pack()
    Label(login_screen, text="").pack()

    # Creates places for the username and password to be entered 
    Label(login_screen, text="Username * ").pack()
    username_login_entry = Entry(login_screen, textvariable=username_verify)
    username_login_entry.pack()
    Label(login_screen, text="").pack()
    Label(login_screen, text="Password * ").pack()
    password_login_entry = Entry(login_screen, textvariable=password_verify, show= '*')
    password_login_entry.pack()
    Label(login_screen, text="").pack()
    Button(login_screen, text="Login", width=10, height=1, bg="blue", command = login_verify).pack()


def register_user():
    
# get username and password
    username_info = username.get()
    password_info = password.get()

# Open file in write mode
    file = open(username_info, "w")

# write username and password information into file
    file.write(username_info + "\n")
    file.write(password_info)
    file.close()

    username_entry.delete(0, END)
    password_entry.delete(0, END)

    # set a label for showing success information on screen 
    Label(register_screen, text="Registration Success", fg="green", font=("calibri", 11)).pack()


def login_verify():
    
    #get username and password
    username1 = username_verify.get()
    password1 = password_verify.get()
    
    # this will delete the entry after login button is pressed
    username_login_entry.delete(0, END)
    password_login_entry.delete(0, END)

    #The method listdir() returns a list containing the names of the entries in the directory given by path.
    list_of_files = os.listdir()  

    #defining verification's conditions 
    if username1 in list_of_files:
        file1 = open(username1, "r")   # open the file in read mode
        verify = file1.read().splitlines()
        
        if password1 in verify:             
            login_sucess()

        else: 
            password_not_recognised()

    else:
        user_not_found()

# Creates a "login success" popup 
def login_sucess():
    global login_success_screen   # make login_success_screen global
    login_success_screen = Toplevel(login_screen)
    login_success_screen.title("Success")
    login_success_screen.geometry("150x100")
    Label(login_success_screen, text="Login Success").pack()
    Button(login_success_screen, text="OK", command = delete_login_success).pack()


# Creates an "invalid password" popup
def password_not_recognised():
    global password_not_recog_screen
    password_not_recog_screen = Toplevel(login_screen)
    password_not_recog_screen.title("Success")
    password_not_recog_screen.geometry("150x100")
    Label(password_not_recog_screen, text="Invalid Password ").pack()
    Button(password_not_recog_screen, text="OK", command=delete_password_not_recognised).pack()



# Creates a "user not found" popup
def user_not_found():
    global user_not_found_screen
    user_not_found_screen = Toplevel(login_screen)
    user_not_found_screen.title("Success")
    user_not_found_screen.geometry("150x100")
    Label(user_not_found_screen, text="User Not Found").pack()
    Button(user_not_found_screen, text="OK", command=delete_user_not_found_screen).pack()


# Deletes popups after they appear: 
# deletes the "login success" popup
def delete_login_success():
    login_success_screen.destroy()

# deletes the "invalid password" popup
def delete_password_not_recognised():
    password_not_recog_screen.destroy()


# deletes the "user not found" popup
def delete_user_not_found_screen():
    user_not_found_screen.destroy()


# create a Form label 
Label(text="Welcome to IROCK", bg="blue", width="300", height="2", font=("Calibri", 13)).pack()
Label(text="Choose Login Or Register", bg="blue", width="300", height="2", font=("Calibri", 13)).pack()
Label(text="").pack()


# create the Login Button on the main screen
Button(text="Login", height="2", width="30", command=login).pack() 
Label(text="").pack()

# create the register button on the main screen
Button(text="Register", height="2", width="30", command=register).pack()


# create OK button
Button(login_success_screen, text="OK", command=delete_login_success).pack()



main_screen.mainloop() # start the GUI
main_account_screen() 
